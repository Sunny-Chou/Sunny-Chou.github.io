import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.io.*;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Queue;
import javax.swing.Box;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.MouseInputListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.io.ObjectInputStream;
import java.io.FileInputStream;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sunny
 */
public class window extends javax.swing.JFrame  {
    private Queue<keyword_product> best_results=new LinkedList<keyword_product>();
    private keyword_product select_kp=null;
    private int index=1;
    /**
     * Creates new form window
     */
    public window() {
        initComponents();
        try {
            total.setVisible(false);
            table.getTableHeader().setVisible(false);
            table.setVisible(false);
            Renderer r=new Renderer();
            r.setHorizontalAlignment(JLabel.LEFT);
            table.getColumn("0").setCellRenderer(r);
            table.getColumn("1").setCellRenderer(r);
            table.getColumn("0").setPreferredWidth(200);
            table.getColumn("1").setPreferredWidth(400);
            table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
            table.getColumn("1").setResizable(true);
            table.addMouseListener(r);
            table.addMouseMotionListener(new Renderer());
            try{
            FileInputStream f = new FileInputStream("best_results.dat");
            ObjectInputStream o = new ObjectInputStream(f);
            best_results = (Queue<keyword_product>) o.readObject();
            o.close();
            }catch (ClassNotFoundException e){
                System.out.println(e.getCause());
                best_results=new LinkedList<keyword_product>();
            }
        } catch (IOException e) {
                System.out.println(e.getCause());
                best_results=new LinkedList<keyword_product>();
        }
    }
    public Queue<keyword_product> getbest_results(){
        return best_results;
    }
    public void setbest_results(Queue<keyword_product> best_results){
        this.best_results=best_results;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        keyword = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        total = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Keyword:");

        keyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keywordActionPerformed(evt);
            }
        });

        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        next.setText("下一頁");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "0", "1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
        }

        total.setText("只搜尋到筆資料");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyword, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(search)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(next)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(total, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(keyword)
                        .addComponent(search)
                        .addComponent(next)
                        .addComponent(total))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        String kw=this.keyword.getText();
        if(kw.equals("")){
            return;
        }
        select_kp=null;
        Iterator it = best_results.iterator();
        while(it.hasNext()){
            keyword_product kp=(keyword_product)it.next();
            if(kp.getkeyword().equals(kw)){
                select_kp=kp;
            }
        }
        if(select_kp==null){
            new fetch_data(kw,this).start();
        }
        index=1;
        while(shows()){
            
        }
        if(select_kp.getproduct().size()<30){
            total.setVisible(true);
            total.setText("只搜尋到"+select_kp.getproduct().size()+"筆資料");
        }else{
            total.setVisible(false);
        }
    }//GEN-LAST:event_searchActionPerformed

    private void keywordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keywordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_keywordActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        // TODO add your handling code here:
        if(select_kp.getproduct().size()>10*index){
            
            index++;
        }else{
            index=1;
        }
        shows();
    }//GEN-LAST:event_nextActionPerformed

    private void tablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tablePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new window().setVisible(true);
            }
        });
    }

    public JTextField getkeyword() {
        return keyword;
    }

    public keyword_product getselect_kp() {
        return select_kp;
    }

    public void setselect_kp(keyword_product select_kp) {
        this.select_kp = select_kp;
    }

    class Renderer extends DefaultTableCellRenderer implements MouseInputListener {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                boolean hasFocus, int row, int column) {
            ((Component) (value)).setBackground(new Color(255, 255, 255, 1));
            return (Component) value;
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

        @Override
        public void mouseDragged(MouseEvent e) {
        }

        @Override
        public void mouseMoved(MouseEvent e) {
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            Point p = e.getPoint();
            int c = table.columnAtPoint(p);
            int r = table.rowAtPoint(p);
            if (table.getModel().getValueAt(r, c) instanceof Box) {
                Box c2 = (Box)table.getModel().getValueAt(r, c);
                Component c3 = c2.getComponent(0);
                String t = c3.toString();
                int index = t.indexOf("href");
                t = t.substring(index + 6, t.length());
                index = t.indexOf("'s");
                if (index != -1) {
                    t = t.substring(0, index);
                    try {
                        URL l = new URL("http:" + t);
                        Desktop.getDesktop().browse(l.toURI());
                    } catch (URISyntaxException | IOException e2) {
                    }
                }
            }
        }
        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }
    }

    public boolean shows() {
        try {
            if (select_kp != null) {
                if (select_kp.getproduct().isEmpty()) {
                    DefaultTableModel model = (DefaultTableModel) table.getModel();
                    model.getDataVector().removeAllElements();
                    table.setVisible(false);
                    return false;
                }
                Iterator it = select_kp.getproduct().iterator();
                int i = 0;
                int maxh = 200;
                DefaultTableModel model = (DefaultTableModel) table.getModel();
                model.getDataVector().removeAllElements();
                while (it.hasNext() && i != 10 * index) {
                    select_product sp = (select_product) it.next();
                    if (i >= 10 * (index - 1)) {
                        URL where;
                        try {
                            where = new URL("http:" + sp.getpicture());
                            ImageIcon img = new ImageIcon(where);
                            img.setImage(img.getImage().getScaledInstance(maxh, maxh, Image.SCALE_DEFAULT));
                            JLabel p = new JLabel();
                            p.setIcon(img);
                            JLabel link = new JLabel();
                            link.setText("<html><a href='" + sp.getlink() + "'style='color:black;font-size:16px;'>" + sp.getname() + "</a></html>");
                            link.setForeground(Color.black);
                            link.setPreferredSize(new Dimension(400,Integer.MAX_VALUE));
                            link.setVerticalAlignment(JLabel.TOP);
                            JLabel price = new JLabel();
                            price.setText("<html><p style='font-size:16px;'>NT$ " + sp.getprice()+"</p></html>");
                            price.setForeground(Color.red);
                            price.setVerticalAlignment(JLabel.BOTTOM);
                            Box b=Box.createVerticalBox();
                            b.add(link);
                            b.add(price);
                            b.setPreferredSize(new Dimension(200,Integer.MAX_VALUE));
                            
                            Object[] data = new Object[]{p, b};
                            model.addRow(data);
                        } catch (MalformedURLException e) {
                        }
                    }
                    i++;
                }
                table.setRowHeight(maxh);
                table.setVisible(true);
                return false;
            }
            return true;
        } catch (NoSuchElementException e) {
            return false;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyword;
    private javax.swing.JButton next;
    private javax.swing.JButton search;
    private javax.swing.JTable table;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
}
