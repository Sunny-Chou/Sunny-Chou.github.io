
import java.io.*;
import java.net.Socket;
import java.nio.charset.Charset;
import java.security.NoSuchAlgorithmException;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Sunny
 */
public class login extends javax.swing.JFrame {
    /**
     * Creates new form login
     */
    private String email_addr;
    private String email_password;
    private int pop_port;
    private String pop_server;
    private int smtp_port;
    private String smtp_server;
    private String smtp_jiami;
    private String pop_jiami;
    public login() {
        try{
        PrintStream out = new PrintStream(System.out, true, "UTF-8");
        System.setOut(out);
        }catch(UnsupportedEncodingException e){
            
        }
        initComponents();
        error.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        user = new javax.swing.JTextField();
        pass = new javax.swing.JPasswordField();
        server = new javax.swing.JTextField();
        port = new javax.swing.JComboBox<>();
        jiami = new javax.swing.JComboBox<>();
        popserver = new javax.swing.JTextField();
        login = new javax.swing.JButton();
        error = new javax.swing.JLabel();
        popport = new javax.swing.JComboBox<>();
        popjiami = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("微軟正黑體", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("電子信箱登入");

        jLabel2.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("帳號：");

        jLabel3.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("密碼：");

        jLabel4.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("SMTP 伺服器：");

        jLabel5.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("SMTP PORT：");

        jLabel6.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("SMTP 加密方式：");

        jLabel7.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("POP 加密方式：");

        jLabel8.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("POP PORT：");

        jLabel9.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("POP 伺服器：");

        user.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        user.setText("a0983452080@gmail.com");

        pass.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        pass.setText("hgqjhlcwufjyjegl");

        server.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        server.setText("smtp.gmail.com");

        port.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        port.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "25", "465", "587" }));

        jiami.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        jiami.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "無", "SSL/TLS", "STARTTLS" }));

        popserver.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        popserver.setText("pop.gmail.com");

        login.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        login.setText("登入");
        login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginActionPerformed(evt);
            }
        });

        error.setFont(new java.awt.Font("微軟正黑體", 1, 12)); // NOI18N
        error.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        error.setText("error訊息");

        popport.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        popport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "110", "995" }));

        popjiami.setFont(new java.awt.Font("微軟正黑體", 1, 18)); // NOI18N
        popjiami.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "無", "SSL/TLS", "STARTTLS" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(user, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                    .addComponent(pass)
                    .addComponent(server)
                    .addComponent(port, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jiami, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(popserver)
                    .addComponent(popport, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(popjiami, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 107, Short.MAX_VALUE))
            .addComponent(error, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(login)
                .addGap(323, 323, 323))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(user)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pass)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(server)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jiami, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(popserver)
                    .addComponent(jLabel9))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(popport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(popjiami, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(error)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login)
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginActionPerformed
        // TODO add your handling code here:
        try{
            if(send()&&popsend()){
                new mailmanage(this).setVisible(true);
                dispose();
            }

        }catch(IOException e){

        }
    }//GEN-LAST:event_loginActionPerformed
                              
    public boolean sendCommandAndResultCheck(Socket smtp, BufferedReader smtp_in, PrintWriter smtp_out, String command, int success_code){
        smtp_out.print(command + "\r\n");
        smtp_out.flush();
        System.out.println("send> " + command);
        return resultCheck(smtp, smtp_in, smtp_out, success_code);
    }

    public boolean resultCheck(Socket smtp, BufferedReader smtp_in, PrintWriter smtp_out, int success_code) {
        try {
            String res = smtp_in.readLine();
            System.out.println("recv> " + res);
            if (Integer.parseInt(res.substring(0, 3)) != success_code) {
                smtp.close();
                throw new RuntimeException(res);
            }
            return false;
        } catch (RuntimeException|IOException e) {
            return true;

        }
    }

    public boolean send() throws IOException {
        try {
            Base64 b = new Base64();
            smtp_jiami=jiami.getItemAt(jiami.getSelectedIndex());
            email_addr=user.getText();
            email_password=new String(pass.getPassword());
            smtp_server=server.getText();
            smtp_port=Integer.parseInt(port.getItemAt(port.getSelectedIndex()));
            if (jiami.getItemAt(jiami.getSelectedIndex()).equals("STARTTLS")) {
                Socket smtp = new Socket(server.getText(), Integer.parseInt(port.getItemAt(port.getSelectedIndex())));
                if (server.getText().equals("")) {
                    error.setText("SMTP伺服器不能為空");
                    return false;
                }
                BufferedReader smtp_in = new BufferedReader(new InputStreamReader(smtp.getInputStream()));
                PrintWriter smtp_out = new PrintWriter(smtp.getOutputStream());
                String myname = user.getText().substring(user.getText().indexOf("@") + 1, user.getText().length());
                if (resultCheck(smtp, smtp_in, smtp_out, 220)) {
                    error.setText("SMTP server沒有回應");
                    smtp.close();
                    return false;
                }
                if (sendCommandAndResultCheck(smtp, smtp_in, smtp_out, "HELO " + myname, 250)) {
                    error.setText("SMTP HELO時出錯");
                    smtp.close();
                    return false;
                }
                if (sendCommandAndResultCheck(smtp, smtp_in, smtp_out, "STARTTLS", 220)) {
                    error.setText("SMTP STARTTLS時出錯");
                    smtp.close();
                    return false;
                }
                SSLContext sslContext = SSLContext.getDefault();
                SSLSocketFactory socketFactory = sslContext.getSocketFactory();
                SSLSocket smtp2 = (SSLSocket) socketFactory.createSocket(smtp, server.getText(), Integer.parseInt(port.getItemAt(port.getSelectedIndex())), true);
                smtp_in = new BufferedReader(new InputStreamReader(smtp2.getInputStream()));
                smtp_out = new PrintWriter(smtp2.getOutputStream());
                if (sendCommandAndResultCheck(smtp2, smtp_in, smtp_out, "AUTH LOGIN", 334)) {
                    error.setText("SMTP驗證時錯誤");
                    smtp2.close();
                    return false;
                }
                String id = b.encode((user.getText()).getBytes());
                String p = b.encode((new String(pass.getPassword())).getBytes());
                if (auth(id, smtp2, smtp_in, smtp_out)) {
                    error.setText("SMTP帳號錯誤");
                    smtp2.close();
                    return false;
                }
                if (auth(p, smtp2, smtp_in, smtp_out)) {
                    error.setText("SMTP帳號密碼錯誤");
                    smtp2.close();
                    return false;
                }
                if (sendCommandAndResultCheck(smtp2, smtp_in, smtp_out, "QUIT", 221)) {
                    error.setText("QUIT時出錯");
                    smtp2.close();
                    return false;
                }
                error.setText("");
                smtp2.close();
                return true;
            } else {
                Socket smtp;
                if (jiami.getItemAt(jiami.getSelectedIndex()).equals("SSL/TLS")) {
                    SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
                    smtp = (SSLSocket) sslSocketFactory.createSocket(server.getText(), Integer.parseInt(port.getItemAt(port.getSelectedIndex())));
                } else {
                    smtp = new Socket(server.getText(), Integer.parseInt(port.getItemAt(port.getSelectedIndex())));
                }
                if (server.getText().equals("")) {
                    error.setText("SMTP伺服器不能為空");
                    return false;
                }
                BufferedReader smtp_in = new BufferedReader(new InputStreamReader(smtp.getInputStream()));
                PrintWriter smtp_out = new PrintWriter(smtp.getOutputStream());
                String myname = user.getText().substring(user.getText().indexOf("@") + 1, user.getText().length());
                if (resultCheck(smtp, smtp_in, smtp_out, 220)) {
                    error.setText("SMTP server沒有回應");
                    smtp.close();
                    return false;
                }
                if (sendCommandAndResultCheck(smtp, smtp_in, smtp_out, "HELO " + myname, 250)) {
                    error.setText("SMTP HELO時出錯");
                    smtp.close();
                    return false;
                }
                if (sendCommandAndResultCheck(smtp, smtp_in, smtp_out, "AUTH LOGIN", 334)) {
                    error.setText("SMTP驗證時錯誤");
                    smtp.close();
                    return false;
                }
                if(user.getText().equals("")){
                    error.setText("帳號不能為空");
                    smtp.close();
                    return false;
                }
                if((new String(pass.getPassword())).equals("")){
                    error.setText("密碼不能為空");
                    smtp.close();
                    return false;
                }
                String id = b.encode((user.getText()).getBytes());
                String p = b.encode((new String(pass.getPassword())).getBytes());
                if (auth(id, smtp, smtp_in, smtp_out)) {
                    error.setText("SMTP帳號錯誤");
                    smtp.close();
                    return false;
                }
                if (auth(p, smtp, smtp_in, smtp_out)) {
                    error.setText("SMTP帳號密碼錯誤");
                    smtp.close();
                    return false;
                }
                if (sendCommandAndResultCheck(smtp, smtp_in, smtp_out, "QUIT", 221)) {
                    error.setText("QUIT時出錯");
                    smtp.close();
                    return false;
                }
                smtp.close();
                error.setText("");
                return true;
            }
        } catch (NoSuchAlgorithmException|IOException e) {
            error.setText("SMTP沒有回應");
            return false;
        }
    }

    public boolean auth(String s, Socket smtp, BufferedReader smtp_in, PrintWriter smtp_out) throws IOException {
        smtp_out.write(s + "\r\n");
        smtp_out.flush();
        String res = smtp_in.readLine();
        System.out.println(res);
        try {
            if (Integer.parseInt(res.substring(0, 3)) == 50 || Integer.parseInt(res.substring(0, 3)) == 535) {
                smtp.close();
                throw new RuntimeException(res);
            }
            return false;
        } catch (RuntimeException e) {
            return true;
        }
    }

    public boolean getSingleLine(String command, Socket pop, BufferedReader pop_in, PrintWriter pop_out) {
        try {
            pop_out.print(command + "\r\n");
            pop_out.flush();
            System.out.println(command);
            String res = pop_in.readLine();
            System.out.println(res);
            if (!("+OK".equals(res.substring(0, 3)))) {
                return true;
            }
            return false;
        } catch (IOException e) {
            return false;
        }
    }

    public boolean popsend() {
        try {
            pop_server = popserver.getText();
            pop_port = Integer.parseInt(popport.getItemAt(popport.getSelectedIndex()));
            pop_jiami = popjiami.getItemAt(popjiami.getSelectedIndex());
            if (popjiami.getItemAt(popjiami.getSelectedIndex()).equals("STARTTLS")) {
                Socket pop = new Socket(popserver.getText(), Integer.parseInt(popport.getItemAt(popport.getSelectedIndex())));
                if (popserver.getText().equals("")) {
                    error.setText("POP伺服器不能為空");
                    return false;
                }
                BufferedReader pop_in = new BufferedReader(new InputStreamReader(pop.getInputStream()));
                PrintWriter pop_out = new PrintWriter(pop.getOutputStream());
                String res = pop_in.readLine();
                System.out.println("res> " + res);
                if (!("+OK".equals(res.substring(0, 3)))) {
                    error.setText("POP");
                    pop.close();
                    return false;
                }
                if (user.getText().equals("")) {
                    error.setText("帳號不能為空");
                    pop.close();
                    return false;
                }
                if ((new String(pass.getPassword())).equals("")) {
                    error.setText("密碼不能為空");
                    pop.close();
                    return false;
                }
                if (getSingleLine("USER " + user.getText(), pop, pop_in, pop_out)) {
                    error.setText("POP帳號有誤");
                    pop.close();
                    return false;
                }
                if (getSingleLine("PASS " + new String(pass.getPassword()), pop, pop_in, pop_out)) {
                    error.setText("POP帳號密碼有誤");
                    pop.close();
                    return false;
                }
                if (getSingleLine("STLS", pop, pop_in, pop_out)) {
                    error.setText("POP STLS時有誤");
                    pop.close();
                    return false;
                }
                getSingleLine("QUIT", pop, pop_in, pop_out);
                pop.close();
                return true;
            } else {
                Socket pop;
                if (popjiami.getItemAt(popjiami.getSelectedIndex()).equals("SSL/TLS")) {
                    SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();
                    pop = (SSLSocket) sslSocketFactory.createSocket(popserver.getText(), Integer.parseInt(popport.getItemAt(popport.getSelectedIndex())));
                } else {
                    pop = new Socket(popserver.getText(), Integer.parseInt(popport.getItemAt(popport.getSelectedIndex())));
                }
                if (popserver.getText().equals("")) {
                    error.setText("POP伺服器不能為空");
                    return false;
                }
                BufferedReader pop_in = new BufferedReader(new InputStreamReader(pop.getInputStream()));
                PrintWriter pop_out = new PrintWriter(pop.getOutputStream());
                String res = pop_in.readLine();
                System.out.println("res> " + res);
                if (!("+OK".equals(res.substring(0, 3)))) {
                    error.setText("POP 沒有回應");
                    pop.close();
                    return false;
                }
                if (user.getText().equals("")) {
                    error.setText("帳號不能為空");
                    pop.close();
                    return false;
                }
                if ((new String(pass.getPassword())).equals("")) {
                    error.setText("密碼不能為空");
                    pop.close();
                    return false;
                }
                if (getSingleLine("USER " + user.getText(), pop, pop_in, pop_out)) {
                    error.setText("POP 帳號有誤");
                    pop.close();
                    return false;
                }
                if (getSingleLine("PASS " + new String(pass.getPassword()), pop, pop_in, pop_out)) {
                    error.setText("POP帳號密碼有誤");
                    pop.close();
                    return false;
                }
                getSingleLine("QUIT", pop, pop_in, pop_out);
                pop.close();
                return true;
            }
        } catch (NullPointerException | IOException e) {
            error.setText("POP沒有回應");
            return false;
        }
    }
    public String getemail_addr(){
        return email_addr;
    }
    public String getemail_password(){
        return email_password;
    }
    public int getpop_port(){
        return pop_port;
    }
    public String getpop_server(){
        return pop_server;
    }
    public int getsmtp_port(){
        return smtp_port;
    }
    public String getsmtp_server(){
        return smtp_server;
    }
    public String getsmtp_jiami(){
        return smtp_jiami;
    }
    public String getpop_jiami(){
        return pop_jiami;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel error;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox<String> jiami;
    private javax.swing.JButton login;
    private javax.swing.JPasswordField pass;
    private javax.swing.JComboBox<String> popjiami;
    private javax.swing.JComboBox<String> popport;
    private javax.swing.JTextField popserver;
    private javax.swing.JComboBox<String> port;
    private javax.swing.JTextField server;
    private javax.swing.JTextField user;
    // End of variables declaration//GEN-END:variables
}
